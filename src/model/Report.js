/**
 * Onfido API
 * The Onfido API is used to submit check requests.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ReportDocument', 'model/ReportOption'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ReportDocument'), require('./ReportOption'));
  } else {
    // Browser globals (root is window)
    if (!root.Onfido) {
      root.Onfido = {};
    }
    root.Onfido.Report = factory(root.Onfido.ApiClient, root.Onfido.ReportDocument, root.Onfido.ReportOption);
  }
}(this, function(ApiClient, ReportDocument, ReportOption) {
  'use strict';



  /**
   * The Report model module.
   * @module model/Report
   * @version 4.1.0
   */

  /**
   * Constructs a new <code>Report</code>.
   * @alias module:model/Report
   * @class
   * @param name {String} The name of the report type.
   */
  var exports = function(name) {
    var _this = this;

    _this['name'] = name;
  };

  /**
   * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Report} obj Optional instance to populate.
   * @return {module:model/Report} The populated <code>Report</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('created_at')) {
        obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
      }
      if (data.hasOwnProperty('href')) {
        obj['href'] = ApiClient.convertToType(data['href'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('result')) {
        obj['result'] = ApiClient.convertToType(data['result'], 'String');
      }
      if (data.hasOwnProperty('sub_result')) {
        obj['sub_result'] = ApiClient.convertToType(data['sub_result'], 'String');
      }
      if (data.hasOwnProperty('breakdown')) {
        obj['breakdown'] = ApiClient.convertToType(data['breakdown'], {'String': Object});
      }
      if (data.hasOwnProperty('properties')) {
        obj['properties'] = ApiClient.convertToType(data['properties'], {'String': Object});
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('variant')) {
        obj['variant'] = ApiClient.convertToType(data['variant'], 'String');
      }
      if (data.hasOwnProperty('options')) {
        obj['options'] = ApiClient.convertToType(data['options'], [ReportOption]);
      }
      if (data.hasOwnProperty('documents')) {
        obj['documents'] = ApiClient.convertToType(data['documents'], [ReportDocument]);
      }
    }
    return obj;
  }

  /**
   * The unique identifier for the report. Read-only.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The date and time at which the report was first initiated. Read-only.
   * @member {Date} created_at
   */
  exports.prototype['created_at'] = undefined;
  /**
   * The API endpoint to retrieve the report. Read-only.
   * @member {String} href
   */
  exports.prototype['href'] = undefined;
  /**
   * The current state of the report in the checking process. Read-only.
   * @member {String} status
   */
  exports.prototype['status'] = undefined;
  /**
   * The result of the report. Read-only.
   * @member {String} result
   */
  exports.prototype['result'] = undefined;
  /**
   * The sub_result of the report. It gives a more detailed result for document reports only, and will be null otherwise. Read-only.
   * @member {String} sub_result
   */
  exports.prototype['sub_result'] = undefined;
  /**
   * The details of the report. This is specific to each type of report. Read-only.
   * @member {Object.<String, Object>} breakdown
   */
  exports.prototype['breakdown'] = undefined;
  /**
   * The properties associated with the report, if any. Read-only.
   * @member {Object.<String, Object>} properties
   */
  exports.prototype['properties'] = undefined;
  /**
   * The name of the report type.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The name of the report type variant, if required.
   * @member {String} variant
   */
  exports.prototype['variant'] = undefined;
  /**
   * List of Report Option objects.
   * @member {Array.<module:model/ReportOption>} options
   */
  exports.prototype['options'] = undefined;
  /**
   * Array of objects with document ids that were used in the Onfido engine. [ONLY USED IN A DOCUMENT CHECK]
   * @member {Array.<module:model/ReportDocument>} documents
   */
  exports.prototype['documents'] = undefined;


  /**
   * Returns The unique identifier for the report. Read-only.
   * @return {String}
   */
  exports.prototype.getId = function() {
    return this['id'];
  }

  /**
   * Sets The unique identifier for the report. Read-only.
   * @param {String} id The unique identifier for the report. Read-only.
   */
  exports.prototype.setId = function(id) {
    this['id'] = id;
  }


  /**
   * Returns The date and time at which the report was first initiated. Read-only.
   * @return {Date}
   */
  exports.prototype.getCreatedAt = function() {
    return this['created_at'];
  }

  /**
   * Sets The date and time at which the report was first initiated. Read-only.
   * @param {Date} created_at The date and time at which the report was first initiated. Read-only.
   */
  exports.prototype.setCreatedAt = function(created_at) {
    this['created_at'] = created_at;
  }


  /**
   * Returns The API endpoint to retrieve the report. Read-only.
   * @return {String}
   */
  exports.prototype.getHref = function() {
    return this['href'];
  }

  /**
   * Sets The API endpoint to retrieve the report. Read-only.
   * @param {String} href The API endpoint to retrieve the report. Read-only.
   */
  exports.prototype.setHref = function(href) {
    this['href'] = href;
  }


  /**
   * Returns The current state of the report in the checking process. Read-only.
   * @return {String}
   */
  exports.prototype.getStatus = function() {
    return this['status'];
  }

  /**
   * Sets The current state of the report in the checking process. Read-only.
   * @param {String} status The current state of the report in the checking process. Read-only.
   */
  exports.prototype.setStatus = function(status) {
    this['status'] = status;
  }


  /**
   * Returns The result of the report. Read-only.
   * @return {String}
   */
  exports.prototype.getResult = function() {
    return this['result'];
  }

  /**
   * Sets The result of the report. Read-only.
   * @param {String} result The result of the report. Read-only.
   */
  exports.prototype.setResult = function(result) {
    this['result'] = result;
  }


  /**
   * Returns The sub_result of the report. It gives a more detailed result for document reports only, and will be null otherwise. Read-only.
   * @return {String}
   */
  exports.prototype.getSubResult = function() {
    return this['sub_result'];
  }

  /**
   * Sets The sub_result of the report. It gives a more detailed result for document reports only, and will be null otherwise. Read-only.
   * @param {String} sub_result The sub_result of the report. It gives a more detailed result for document reports only, and will be null otherwise. Read-only.
   */
  exports.prototype.setSubResult = function(sub_result) {
    this['sub_result'] = sub_result;
  }


  /**
   * Returns The details of the report. This is specific to each type of report. Read-only.
   * @return {Object.<String, Object>}
   */
  exports.prototype.getBreakdown = function() {
    return this['breakdown'];
  }

  /**
   * Sets The details of the report. This is specific to each type of report. Read-only.
   * @param {Object.<String, Object>} breakdown The details of the report. This is specific to each type of report. Read-only.
   */
  exports.prototype.setBreakdown = function(breakdown) {
    this['breakdown'] = breakdown;
  }


  /**
   * Returns The properties associated with the report, if any. Read-only.
   * @return {Object.<String, Object>}
   */
  exports.prototype.getProperties = function() {
    return this['properties'];
  }

  /**
   * Sets The properties associated with the report, if any. Read-only.
   * @param {Object.<String, Object>} properties The properties associated with the report, if any. Read-only.
   */
  exports.prototype.setProperties = function(properties) {
    this['properties'] = properties;
  }


  /**
   * Returns The name of the report type.
   * @return {String}
   */
  exports.prototype.getName = function() {
    return this['name'];
  }

  /**
   * Sets The name of the report type.
   * @param {String} name The name of the report type.
   */
  exports.prototype.setName = function(name) {
    this['name'] = name;
  }


  /**
   * Returns The name of the report type variant, if required.
   * @return {String}
   */
  exports.prototype.getVariant = function() {
    return this['variant'];
  }

  /**
   * Sets The name of the report type variant, if required.
   * @param {String} variant The name of the report type variant, if required.
   */
  exports.prototype.setVariant = function(variant) {
    this['variant'] = variant;
  }


  /**
   * Returns List of Report Option objects.
   * @return {Array.<module:model/ReportOption>}
   */
  exports.prototype.getOptions = function() {
    return this['options'];
  }

  /**
   * Sets List of Report Option objects.
   * @param {Array.<module:model/ReportOption>} options List of Report Option objects.
   */
  exports.prototype.setOptions = function(options) {
    this['options'] = options;
  }


  /**
   * Returns Array of objects with document ids that were used in the Onfido engine. [ONLY USED IN A DOCUMENT CHECK]
   * @return {Array.<module:model/ReportDocument>}
   */
  exports.prototype.getDocuments = function() {
    return this['documents'];
  }

  /**
   * Sets Array of objects with document ids that were used in the Onfido engine. [ONLY USED IN A DOCUMENT CHECK]
   * @param {Array.<module:model/ReportDocument>} documents Array of objects with document ids that were used in the Onfido engine. [ONLY USED IN A DOCUMENT CHECK]
   */
  exports.prototype.setDocuments = function(documents) {
    this['documents'] = documents;
  }



  return exports;
}));


