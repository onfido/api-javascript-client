/**
 * Onfido API
 * The Onfido API is used to submit check requests.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Onfido) {
      root.Onfido = {};
    }
    root.Onfido.IdNumber = factory(root.Onfido.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The IdNumber model module.
   * @module model/IdNumber
   * @version 4.2.0
   */

  /**
   * Constructs a new <code>IdNumber</code>.
   * @alias module:model/IdNumber
   * @class
   */
  var exports = function() {
    var _this = this;

  };

  /**
   * Constructs a <code>IdNumber</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IdNumber} obj Optional instance to populate.
   * @return {module:model/IdNumber} The populated <code>IdNumber</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('value')) {
        obj['value'] = ApiClient.convertToType(data['value'], 'String');
      }
      if (data.hasOwnProperty('state_code')) {
        obj['state_code'] = ApiClient.convertToType(data['state_code'], 'String');
      }
    }
    return obj;
  }

  /**
   * Type of ID number. Valid values are `ssn`, `social_insurance`, `tax_id`, `identity_card`, `passport` and `driving_license`
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Value of ID number
   * @member {String} value
   */
  exports.prototype['value'] = undefined;
  /**
   * Two letter code of issuing state (state-issued driving licenses only)
   * @member {String} state_code
   */
  exports.prototype['state_code'] = undefined;


  /**
   * Returns Type of ID number. Valid values are `ssn`, `social_insurance`, `tax_id`, `identity_card`, `passport` and `driving_license`
   * @return {String}
   */
  exports.prototype.getType = function() {
    return this['type'];
  }

  /**
   * Sets Type of ID number. Valid values are `ssn`, `social_insurance`, `tax_id`, `identity_card`, `passport` and `driving_license`
   * @param {String} type Type of ID number. Valid values are `ssn`, `social_insurance`, `tax_id`, `identity_card`, `passport` and `driving_license`
   */
  exports.prototype.setType = function(type) {
    this['type'] = type;
  }


  /**
   * Returns Value of ID number
   * @return {String}
   */
  exports.prototype.getValue = function() {
    return this['value'];
  }

  /**
   * Sets Value of ID number
   * @param {String} value Value of ID number
   */
  exports.prototype.setValue = function(value) {
    this['value'] = value;
  }


  /**
   * Returns Two letter code of issuing state (state-issued driving licenses only)
   * @return {String}
   */
  exports.prototype.getStateCode = function() {
    return this['state_code'];
  }

  /**
   * Sets Two letter code of issuing state (state-issued driving licenses only)
   * @param {String} state_code Two letter code of issuing state (state-issued driving licenses only)
   */
  exports.prototype.setStateCode = function(state_code) {
    this['state_code'] = state_code;
  }



  return exports;
}));


