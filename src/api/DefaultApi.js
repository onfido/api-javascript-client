/**
 * Onfido API
 * The Onfido API is used to submit check requests.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Applicant', 'model/ApplicantsList', 'model/Check', 'model/CheckWithReportIds', 'model/ChecksList', 'model/Document', 'model/DocumentsList', 'model/Error', 'model/GenericAddressesList', 'model/LivePhoto', 'model/LivePhotosList', 'model/LiveVideo', 'model/LiveVideosList', 'model/Report', 'model/ReportTypeGroup', 'model/ReportTypeGroupsList', 'model/ReportsList', 'model/SdkTokenRequest', 'model/SdkTokenResponse', 'model/Webhook', 'model/WebhooksList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Applicant'), require('../model/ApplicantsList'), require('../model/Check'), require('../model/CheckWithReportIds'), require('../model/ChecksList'), require('../model/Document'), require('../model/DocumentsList'), require('../model/Error'), require('../model/GenericAddressesList'), require('../model/LivePhoto'), require('../model/LivePhotosList'), require('../model/LiveVideo'), require('../model/LiveVideosList'), require('../model/Report'), require('../model/ReportTypeGroup'), require('../model/ReportTypeGroupsList'), require('../model/ReportsList'), require('../model/SdkTokenRequest'), require('../model/SdkTokenResponse'), require('../model/Webhook'), require('../model/WebhooksList'));
  } else {
    // Browser globals (root is window)
    if (!root.Onfido) {
      root.Onfido = {};
    }
    root.Onfido.DefaultApi = factory(root.Onfido.ApiClient, root.Onfido.Applicant, root.Onfido.ApplicantsList, root.Onfido.Check, root.Onfido.CheckWithReportIds, root.Onfido.ChecksList, root.Onfido.Document, root.Onfido.DocumentsList, root.Onfido.Error, root.Onfido.GenericAddressesList, root.Onfido.LivePhoto, root.Onfido.LivePhotosList, root.Onfido.LiveVideo, root.Onfido.LiveVideosList, root.Onfido.Report, root.Onfido.ReportTypeGroup, root.Onfido.ReportTypeGroupsList, root.Onfido.ReportsList, root.Onfido.SdkTokenRequest, root.Onfido.SdkTokenResponse, root.Onfido.Webhook, root.Onfido.WebhooksList);
  }
}(this, function(ApiClient, Applicant, ApplicantsList, Check, CheckWithReportIds, ChecksList, Document, DocumentsList, Error, GenericAddressesList, LivePhoto, LivePhotosList, LiveVideo, LiveVideosList, Report, ReportTypeGroup, ReportTypeGroupsList, ReportsList, SdkTokenRequest, SdkTokenResponse, Webhook, WebhooksList) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 4.2.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * This endpoint is for cancelling individual paused reports.
     * @param {String} check_id 
     * @param {String} report_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.cancelReportWithHttpInfo = function(check_id, report_id) {
      var postBody = null;

      // verify the required parameter 'check_id' is set
      if (check_id === undefined || check_id === null) {
        throw new Error("Missing the required parameter 'check_id' when calling cancelReport");
      }

      // verify the required parameter 'report_id' is set
      if (report_id === undefined || report_id === null) {
        throw new Error("Missing the required parameter 'report_id' when calling cancelReport");
      }


      var pathParams = {
        'check_id': check_id,
        'report_id': report_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/checks/{check_id}/reports/{report_id}/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * This endpoint is for cancelling individual paused reports.
     * @param {String} check_id 
     * @param {String} report_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.cancelReport = function(check_id, report_id) {
      return this.cancelReportWithHttpInfo(check_id, report_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Applicant
     * @param {module:model/Applicant} Applicant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Applicant} and HTTP response
     */
    this.createApplicantWithHttpInfo = function(Applicant) {
      var postBody = Applicant;

      // verify the required parameter 'Applicant' is set
      if (Applicant === undefined || Applicant === null) {
        throw new Error("Missing the required parameter 'Applicant' when calling createApplicant");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Applicant;

      return this.apiClient.callApi(
        '/applicants', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create Applicant
     * @param {module:model/Applicant} Applicant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Applicant}
     */
    this.createApplicant = function(Applicant) {
      return this.createApplicantWithHttpInfo(Applicant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a check
     * @param {String} applicant_id 
     * @param {module:model/Check} Check 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Check} and HTTP response
     */
    this.createCheckWithHttpInfo = function(applicant_id, Check) {
      var postBody = Check;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling createCheck");
      }

      // verify the required parameter 'Check' is set
      if (Check === undefined || Check === null) {
        throw new Error("Missing the required parameter 'Check' when calling createCheck");
      }


      var pathParams = {
        'applicant_id': applicant_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Check;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/checks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a check
     * @param {String} applicant_id 
     * @param {module:model/Check} Check 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Check}
     */
    this.createCheck = function(applicant_id, Check) {
      return this.createCheckWithHttpInfo(applicant_id, Check)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a webhook
     * @param {module:model/Webhook} Webhook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Webhook} and HTTP response
     */
    this.createWebhookWithHttpInfo = function(Webhook) {
      var postBody = Webhook;

      // verify the required parameter 'Webhook' is set
      if (Webhook === undefined || Webhook === null) {
        throw new Error("Missing the required parameter 'Webhook' when calling createWebhook");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Webhook;

      return this.apiClient.callApi(
        '/webhooks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a webhook
     * @param {module:model/Webhook} Webhook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Webhook}
     */
    this.createWebhook = function(Webhook) {
      return this.createWebhookWithHttpInfo(Webhook)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a webhook
     * @param {String} webhook_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteWebhookWithHttpInfo = function(webhook_id) {
      var postBody = null;

      // verify the required parameter 'webhook_id' is set
      if (webhook_id === undefined || webhook_id === null) {
        throw new Error("Missing the required parameter 'webhook_id' when calling deleteWebhook");
      }


      var pathParams = {
        'webhook_id': webhook_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/webhooks/{webhook_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a webhook
     * @param {String} webhook_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteWebhook = function(webhook_id) {
      return this.deleteWebhookWithHttpInfo(webhook_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Applicant
     * @param {String} applicant_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.destroyApplicantWithHttpInfo = function(applicant_id) {
      var postBody = null;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling destroyApplicant");
      }


      var pathParams = {
        'applicant_id': applicant_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete Applicant
     * @param {String} applicant_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.destroyApplicant = function(applicant_id) {
      return this.destroyApplicantWithHttpInfo(applicant_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download a documents raw data
     * @param {String} applicant_id 
     * @param {String} document_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    this.downloadDocumentWithHttpInfo = function(applicant_id, document_id) {
      var postBody = null;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling downloadDocument");
      }

      // verify the required parameter 'document_id' is set
      if (document_id === undefined || document_id === null) {
        throw new Error("Missing the required parameter 'document_id' when calling downloadDocument");
      }


      var pathParams = {
        'applicant_id': applicant_id,
        'document_id': document_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['*/*', 'application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/documents/{document_id}/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download a documents raw data
     * @param {String} applicant_id 
     * @param {String} document_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    this.downloadDocument = function(applicant_id, document_id) {
      return this.downloadDocumentWithHttpInfo(applicant_id, document_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download live photo
     * Live photos are downloaded using this endpoint.
     * @param {String} live_photo_id The live photo’s unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    this.downloadLivePhotoWithHttpInfo = function(live_photo_id) {
      var postBody = null;

      // verify the required parameter 'live_photo_id' is set
      if (live_photo_id === undefined || live_photo_id === null) {
        throw new Error("Missing the required parameter 'live_photo_id' when calling downloadLivePhoto");
      }


      var pathParams = {
        'live_photo_id': live_photo_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['*/*', 'application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/live_photos/{live_photo_id}/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download live photo
     * Live photos are downloaded using this endpoint.
     * @param {String} live_photo_id The live photo’s unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    this.downloadLivePhoto = function(live_photo_id) {
      return this.downloadLivePhotoWithHttpInfo(live_photo_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download live video
     * Live videos are downloaded using this endpoint.
     * @param {String} live_video_id The live video’s unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    this.downloadLiveVideoWithHttpInfo = function(live_video_id) {
      var postBody = null;

      // verify the required parameter 'live_video_id' is set
      if (live_video_id === undefined || live_video_id === null) {
        throw new Error("Missing the required parameter 'live_video_id' when calling downloadLiveVideo");
      }


      var pathParams = {
        'live_video_id': live_video_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['*/*', 'application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/live_videos/{live_video_id}/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download live video
     * Live videos are downloaded using this endpoint.
     * @param {String} live_video_id The live video’s unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    this.downloadLiveVideo = function(live_video_id) {
      return this.downloadLiveVideoWithHttpInfo(live_video_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a webhook
     * @param {String} webhook_id 
     * @param {module:model/Webhook} Webhook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Webhook} and HTTP response
     */
    this.editWebhookWithHttpInfo = function(webhook_id, Webhook) {
      var postBody = Webhook;

      // verify the required parameter 'webhook_id' is set
      if (webhook_id === undefined || webhook_id === null) {
        throw new Error("Missing the required parameter 'webhook_id' when calling editWebhook");
      }

      // verify the required parameter 'Webhook' is set
      if (Webhook === undefined || Webhook === null) {
        throw new Error("Missing the required parameter 'Webhook' when calling editWebhook");
      }


      var pathParams = {
        'webhook_id': webhook_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Webhook;

      return this.apiClient.callApi(
        '/webhooks/{webhook_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Edit a webhook
     * @param {String} webhook_id 
     * @param {module:model/Webhook} Webhook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Webhook}
     */
    this.editWebhook = function(webhook_id, Webhook) {
      return this.editWebhookWithHttpInfo(webhook_id, Webhook)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search for addresses by postcode
     * @param {String} postcode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenericAddressesList} and HTTP response
     */
    this.findAddressesWithHttpInfo = function(postcode) {
      var postBody = null;

      // verify the required parameter 'postcode' is set
      if (postcode === undefined || postcode === null) {
        throw new Error("Missing the required parameter 'postcode' when calling findAddresses");
      }


      var pathParams = {
      };
      var queryParams = {
        'postcode': postcode,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GenericAddressesList;

      return this.apiClient.callApi(
        '/addresses/pick', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search for addresses by postcode
     * @param {String} postcode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenericAddressesList}
     */
    this.findAddresses = function(postcode) {
      return this.findAddressesWithHttpInfo(postcode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Applicant
     * @param {String} applicant_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Applicant} and HTTP response
     */
    this.findApplicantWithHttpInfo = function(applicant_id) {
      var postBody = null;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling findApplicant");
      }


      var pathParams = {
        'applicant_id': applicant_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Applicant;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve Applicant
     * @param {String} applicant_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Applicant}
     */
    this.findApplicant = function(applicant_id) {
      return this.findApplicantWithHttpInfo(applicant_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Check
     * @param {String} applicant_id 
     * @param {String} check_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckWithReportIds} and HTTP response
     */
    this.findCheckWithHttpInfo = function(applicant_id, check_id) {
      var postBody = null;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling findCheck");
      }

      // verify the required parameter 'check_id' is set
      if (check_id === undefined || check_id === null) {
        throw new Error("Missing the required parameter 'check_id' when calling findCheck");
      }


      var pathParams = {
        'applicant_id': applicant_id,
        'check_id': check_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CheckWithReportIds;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/checks/{check_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a Check
     * @param {String} applicant_id 
     * @param {String} check_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckWithReportIds}
     */
    this.findCheck = function(applicant_id, check_id) {
      return this.findCheckWithHttpInfo(applicant_id, check_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * A single document can be retrieved by calling this endpoint with the document’s unique identifier.
     * @param {String} applicant_id 
     * @param {String} document_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Document} and HTTP response
     */
    this.findDocumentWithHttpInfo = function(applicant_id, document_id) {
      var postBody = null;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling findDocument");
      }

      // verify the required parameter 'document_id' is set
      if (document_id === undefined || document_id === null) {
        throw new Error("Missing the required parameter 'document_id' when calling findDocument");
      }


      var pathParams = {
        'applicant_id': applicant_id,
        'document_id': document_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Document;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/documents/{document_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * A single document can be retrieved by calling this endpoint with the document’s unique identifier.
     * @param {String} applicant_id 
     * @param {String} document_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Document}
     */
    this.findDocument = function(applicant_id, document_id) {
      return this.findDocumentWithHttpInfo(applicant_id, document_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve live photo
     * @param {String} live_photo_id The live photo’s unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LivePhoto} and HTTP response
     */
    this.findLivePhotoWithHttpInfo = function(live_photo_id) {
      var postBody = null;

      // verify the required parameter 'live_photo_id' is set
      if (live_photo_id === undefined || live_photo_id === null) {
        throw new Error("Missing the required parameter 'live_photo_id' when calling findLivePhoto");
      }


      var pathParams = {
        'live_photo_id': live_photo_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LivePhoto;

      return this.apiClient.callApi(
        '/live_photos/{live_photo_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve live photo
     * @param {String} live_photo_id The live photo’s unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LivePhoto}
     */
    this.findLivePhoto = function(live_photo_id) {
      return this.findLivePhotoWithHttpInfo(live_photo_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve live video
     * @param {String} live_video_id The live video’s unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LiveVideo} and HTTP response
     */
    this.findLiveVideoWithHttpInfo = function(live_video_id) {
      var postBody = null;

      // verify the required parameter 'live_video_id' is set
      if (live_video_id === undefined || live_video_id === null) {
        throw new Error("Missing the required parameter 'live_video_id' when calling findLiveVideo");
      }


      var pathParams = {
        'live_video_id': live_video_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LiveVideo;

      return this.apiClient.callApi(
        '/live_videos/{live_video_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve live video
     * @param {String} live_video_id The live video’s unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LiveVideo}
     */
    this.findLiveVideo = function(live_video_id) {
      return this.findLiveVideoWithHttpInfo(live_video_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * A single report can be retrieved using this endpoint with the corresponding unique identifier.
     * @param {String} check_id 
     * @param {String} report_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Report} and HTTP response
     */
    this.findReportWithHttpInfo = function(check_id, report_id) {
      var postBody = null;

      // verify the required parameter 'check_id' is set
      if (check_id === undefined || check_id === null) {
        throw new Error("Missing the required parameter 'check_id' when calling findReport");
      }

      // verify the required parameter 'report_id' is set
      if (report_id === undefined || report_id === null) {
        throw new Error("Missing the required parameter 'report_id' when calling findReport");
      }


      var pathParams = {
        'check_id': check_id,
        'report_id': report_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Report;

      return this.apiClient.callApi(
        '/checks/{check_id}/reports/{report_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * A single report can be retrieved using this endpoint with the corresponding unique identifier.
     * @param {String} check_id 
     * @param {String} report_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Report}
     */
    this.findReport = function(check_id, report_id) {
      return this.findReportWithHttpInfo(check_id, report_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve single report type group object
     * @param {String} report_type_group_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReportTypeGroup} and HTTP response
     */
    this.findReportTypeGroupWithHttpInfo = function(report_type_group_id) {
      var postBody = null;

      // verify the required parameter 'report_type_group_id' is set
      if (report_type_group_id === undefined || report_type_group_id === null) {
        throw new Error("Missing the required parameter 'report_type_group_id' when calling findReportTypeGroup");
      }


      var pathParams = {
        'report_type_group_id': report_type_group_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ReportTypeGroup;

      return this.apiClient.callApi(
        '/report_type_groups/{report_type_group_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve single report type group object
     * @param {String} report_type_group_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReportTypeGroup}
     */
    this.findReportTypeGroup = function(report_type_group_id) {
      return this.findReportTypeGroupWithHttpInfo(report_type_group_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Webhook
     * @param {String} webhook_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Webhook} and HTTP response
     */
    this.findWebhookWithHttpInfo = function(webhook_id) {
      var postBody = null;

      // verify the required parameter 'webhook_id' is set
      if (webhook_id === undefined || webhook_id === null) {
        throw new Error("Missing the required parameter 'webhook_id' when calling findWebhook");
      }


      var pathParams = {
        'webhook_id': webhook_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Webhook;

      return this.apiClient.callApi(
        '/webhooks/{webhook_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a Webhook
     * @param {String} webhook_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Webhook}
     */
    this.findWebhook = function(webhook_id) {
      return this.findWebhookWithHttpInfo(webhook_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate a SDK token
     * @param {module:model/SdkTokenRequest} SdkTokenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SdkTokenResponse} and HTTP response
     */
    this.generateSdkTokenWithHttpInfo = function(SdkTokenRequest) {
      var postBody = SdkTokenRequest;

      // verify the required parameter 'SdkTokenRequest' is set
      if (SdkTokenRequest === undefined || SdkTokenRequest === null) {
        throw new Error("Missing the required parameter 'SdkTokenRequest' when calling generateSdkToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SdkTokenResponse;

      return this.apiClient.callApi(
        '/sdk_token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generate a SDK token
     * @param {module:model/SdkTokenRequest} SdkTokenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SdkTokenResponse}
     */
    this.generateSdkToken = function(SdkTokenRequest) {
      return this.generateSdkTokenWithHttpInfo(SdkTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Applicants
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page to return. The first page is &#x60;page&#x3D;1&#x60; (default to 1)
     * @param {Number} opts.per_page The number of objects per page. (default to 20)
     * @param {Boolean} opts.include_deleted Whether to also include applicants scheduled for deletion. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicantsList} and HTTP response
     */
    this.listApplicantsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['per_page'],
        'include_deleted': opts['include_deleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApplicantsList;

      return this.apiClient.callApi(
        '/applicants', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Applicants
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page to return. The first page is &#x60;page&#x3D;1&#x60; (default to 1)
     * @param {Number} opts.per_page The number of objects per page. (default to 20)
     * @param {Boolean} opts.include_deleted Whether to also include applicants scheduled for deletion. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicantsList}
     */
    this.listApplicants = function(opts) {
      return this.listApplicantsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Checks
     * @param {String} applicant_id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page to return. The first page is &#x60;page&#x3D;1&#x60;. (default to 1)
     * @param {Number} opts.per_page The number of objects per page. (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChecksList} and HTTP response
     */
    this.listChecksWithHttpInfo = function(applicant_id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling listChecks");
      }


      var pathParams = {
        'applicant_id': applicant_id
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['per_page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ChecksList;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/checks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve Checks
     * @param {String} applicant_id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page to return. The first page is &#x60;page&#x3D;1&#x60;. (default to 1)
     * @param {Number} opts.per_page The number of objects per page. (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChecksList}
     */
    this.listChecks = function(applicant_id, opts) {
      return this.listChecksWithHttpInfo(applicant_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List documents
     * All documents belonging to an applicant can be listed from this endpoint
     * @param {String} applicant_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsList} and HTTP response
     */
    this.listDocumentsWithHttpInfo = function(applicant_id) {
      var postBody = null;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling listDocuments");
      }


      var pathParams = {
        'applicant_id': applicant_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DocumentsList;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List documents
     * All documents belonging to an applicant can be listed from this endpoint
     * @param {String} applicant_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsList}
     */
    this.listDocuments = function(applicant_id) {
      return this.listDocumentsWithHttpInfo(applicant_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List live photos
     * @param {String} applicant_id The id of the applicant the live photos belong to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LivePhotosList} and HTTP response
     */
    this.listLivePhotosWithHttpInfo = function(applicant_id) {
      var postBody = null;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling listLivePhotos");
      }


      var pathParams = {
      };
      var queryParams = {
        'applicant_id': applicant_id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LivePhotosList;

      return this.apiClient.callApi(
        '/live_photos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List live photos
     * @param {String} applicant_id The id of the applicant the live photos belong to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LivePhotosList}
     */
    this.listLivePhotos = function(applicant_id) {
      return this.listLivePhotosWithHttpInfo(applicant_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List live videos
     * @param {String} applicant_id The id of the applicant the live videos belong to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LiveVideosList} and HTTP response
     */
    this.listLiveVideosWithHttpInfo = function(applicant_id) {
      var postBody = null;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling listLiveVideos");
      }


      var pathParams = {
      };
      var queryParams = {
        'applicant_id': applicant_id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LiveVideosList;

      return this.apiClient.callApi(
        '/live_videos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List live videos
     * @param {String} applicant_id The id of the applicant the live videos belong to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LiveVideosList}
     */
    this.listLiveVideos = function(applicant_id) {
      return this.listLiveVideosWithHttpInfo(applicant_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all report type groups
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReportTypeGroupsList} and HTTP response
     */
    this.listReportTypeGroupsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ReportTypeGroupsList;

      return this.apiClient.callApi(
        '/report_type_groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all report type groups
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReportTypeGroupsList}
     */
    this.listReportTypeGroups = function() {
      return this.listReportTypeGroupsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * All the reports belonging to a particular check can be listed from this endpoint.
     * @param {String} check_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReportsList} and HTTP response
     */
    this.listReportsWithHttpInfo = function(check_id) {
      var postBody = null;

      // verify the required parameter 'check_id' is set
      if (check_id === undefined || check_id === null) {
        throw new Error("Missing the required parameter 'check_id' when calling listReports");
      }


      var pathParams = {
        'check_id': check_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ReportsList;

      return this.apiClient.callApi(
        '/checks/{check_id}/reports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * All the reports belonging to a particular check can be listed from this endpoint.
     * @param {String} check_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReportsList}
     */
    this.listReports = function(check_id) {
      return this.listReportsWithHttpInfo(check_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List webhooks
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebhooksList} and HTTP response
     */
    this.listWebhooksWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WebhooksList;

      return this.apiClient.callApi(
        '/webhooks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List webhooks
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebhooksList}
     */
    this.listWebhooks = function() {
      return this.listWebhooksWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Restore Applicant
     * @param {String} applicant_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.restoreApplicantWithHttpInfo = function(applicant_id) {
      var postBody = null;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling restoreApplicant");
      }


      var pathParams = {
        'applicant_id': applicant_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/restore', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Restore Applicant
     * @param {String} applicant_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.restoreApplicant = function(applicant_id) {
      return this.restoreApplicantWithHttpInfo(applicant_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Resume a Check
     * @param {String} check_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.resumeCheckWithHttpInfo = function(check_id) {
      var postBody = null;

      // verify the required parameter 'check_id' is set
      if (check_id === undefined || check_id === null) {
        throw new Error("Missing the required parameter 'check_id' when calling resumeCheck");
      }


      var pathParams = {
        'check_id': check_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/checks/{check_id}/resume', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Resume a Check
     * @param {String} check_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.resumeCheck = function(check_id) {
      return this.resumeCheckWithHttpInfo(check_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint is for resuming individual paused reports.
     * @param {String} check_id 
     * @param {String} report_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.resumeReportWithHttpInfo = function(check_id, report_id) {
      var postBody = null;

      // verify the required parameter 'check_id' is set
      if (check_id === undefined || check_id === null) {
        throw new Error("Missing the required parameter 'check_id' when calling resumeReport");
      }

      // verify the required parameter 'report_id' is set
      if (report_id === undefined || report_id === null) {
        throw new Error("Missing the required parameter 'report_id' when calling resumeReport");
      }


      var pathParams = {
        'check_id': check_id,
        'report_id': report_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/checks/{check_id}/reports/{report_id}/resume', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * This endpoint is for resuming individual paused reports.
     * @param {String} check_id 
     * @param {String} report_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.resumeReport = function(check_id, report_id) {
      return this.resumeReportWithHttpInfo(check_id, report_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Applicant
     * Allows updating of an applicant’s information before any checks are created. - Partial updates - Addresses and ID numbers present will replace existing ones - Same applicant validations to create applicant 
     * @param {String} applicant_id 
     * @param {module:model/Applicant} Applicant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Applicant} and HTTP response
     */
    this.updateApplicantWithHttpInfo = function(applicant_id, Applicant) {
      var postBody = Applicant;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling updateApplicant");
      }

      // verify the required parameter 'Applicant' is set
      if (Applicant === undefined || Applicant === null) {
        throw new Error("Missing the required parameter 'Applicant' when calling updateApplicant");
      }


      var pathParams = {
        'applicant_id': applicant_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Applicant;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update Applicant
     * Allows updating of an applicant’s information before any checks are created. - Partial updates - Addresses and ID numbers present will replace existing ones - Same applicant validations to create applicant 
     * @param {String} applicant_id 
     * @param {module:model/Applicant} Applicant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Applicant}
     */
    this.updateApplicant = function(applicant_id, Applicant) {
      return this.updateApplicantWithHttpInfo(applicant_id, Applicant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload a document
     * Documents are uploaded using this endpoint. Along with the file upload the relevant document type must be specified. Documents must be uploaded as a multipart form. The valid file types are: jpg, png and pdf. The file size must be between 2KB and 3MB. 
     * @param {String} applicant_id 
     * @param {String} type The type of document.
     * @param {File} file The file to be uploaded.
     * @param {Object} opts Optional parameters
     * @param {String} opts.side Either the &#x60;front&#x60; or &#x60;back&#x60; of the document.
     * @param {String} opts.issuing_country The issuing country of the document, a 3-letter ISO code.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Document} and HTTP response
     */
    this.uploadDocumentWithHttpInfo = function(applicant_id, type, file, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling uploadDocument");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling uploadDocument");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadDocument");
      }


      var pathParams = {
        'applicant_id': applicant_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'type': type,
        'file': file,
        'side': opts['side'],
        'issuing_country': opts['issuing_country']
      };

      var authNames = ['Token'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Document;

      return this.apiClient.callApi(
        '/applicants/{applicant_id}/documents', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload a document
     * Documents are uploaded using this endpoint. Along with the file upload the relevant document type must be specified. Documents must be uploaded as a multipart form. The valid file types are: jpg, png and pdf. The file size must be between 2KB and 3MB. 
     * @param {String} applicant_id 
     * @param {String} type The type of document.
     * @param {File} file The file to be uploaded.
     * @param {Object} opts Optional parameters
     * @param {String} opts.side Either the &#x60;front&#x60; or &#x60;back&#x60; of the document.
     * @param {String} opts.issuing_country The issuing country of the document, a 3-letter ISO code.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Document}
     */
    this.uploadDocument = function(applicant_id, type, file, opts) {
      return this.uploadDocumentWithHttpInfo(applicant_id, type, file, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload live photo
     * You can upload live photos to this endpoint. Like document upload, files must be uploaded as a multipart form. Valid file types are jpg, png and pdf. The file size must be between 32KB and 10MB. Live photos are validated at the point of upload to check that they contain exactly one face. This validation can be disabled by setting the advanced_validation argument to false. 
     * @param {String} applicant_id 
     * @param {File} file The file to be uploaded.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.advanced_validation Validates that the live photo contains exactly one face. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LivePhoto} and HTTP response
     */
    this.uploadLivePhotoWithHttpInfo = function(applicant_id, file, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicant_id' is set
      if (applicant_id === undefined || applicant_id === null) {
        throw new Error("Missing the required parameter 'applicant_id' when calling uploadLivePhoto");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadLivePhoto");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'applicant_id': applicant_id,
        'file': file,
        'advanced_validation': opts['advanced_validation']
      };

      var authNames = ['Token'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = LivePhoto;

      return this.apiClient.callApi(
        '/live_photos', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload live photo
     * You can upload live photos to this endpoint. Like document upload, files must be uploaded as a multipart form. Valid file types are jpg, png and pdf. The file size must be between 32KB and 10MB. Live photos are validated at the point of upload to check that they contain exactly one face. This validation can be disabled by setting the advanced_validation argument to false. 
     * @param {String} applicant_id 
     * @param {File} file The file to be uploaded.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.advanced_validation Validates that the live photo contains exactly one face. (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LivePhoto}
     */
    this.uploadLivePhoto = function(applicant_id, file, opts) {
      return this.uploadLivePhotoWithHttpInfo(applicant_id, file, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
